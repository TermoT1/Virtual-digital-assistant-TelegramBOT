import hashlib

from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.utils.exceptions import TelegramAPIError

import dispatcher
from dispatcher import dp
from bot import BotDB
from dispatcher import bot
from aiogram.dispatcher.filters.state import StatesGroup, State


# —Å–æ–∑–¥–∞–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
class RegistrationStates(StatesGroup):
    USERNAME_INPUT = State()
    PASSWORD_INPUT = State()
    group_id = State()
    username = State()


class DeleteRegistrationStates(StatesGroup):
    confirm = State()


class LogoutStates(StatesGroup):
    confirm = State()


class LoginStates(StatesGroup):
    USERNAME_INPUT = State()
    PASSWORD_INPUT = State()
    username = State()
    confirm = State()


@dp.message_handler(commands=("logout"))
async def logout(message: types.Message):
    kb = ReplyKeyboardMarkup(
        keyboard=[
            [
                KeyboardButton(text=f'–î–∞')
            ],
            [
                KeyboardButton(text=f'–ù–µ—Ç')
            ],
        ],
        resize_keyboard=True,
        one_time_keyboard=True
    )
    await message.answer("–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ –≤—ã–π—Ç–∏ –∏–∑ —É—á–µ—Ç–Ω–æ–π –∑–∞–ø–∏—Å–∏?", reply_markup=kb)
    await LogoutStates.confirm.set()


@dp.message_handler(state=LogoutStates.confirm)
async def process_confirm(message: types.Message, state: FSMContext):
    if message.text.lower() == '–¥–∞':
        BotDB.logout(message.from_user.id)
        await message.answer("–í—ã —É—Å–ø–µ—à–Ω–æ –≤—ã—à–ª–∏ –∏–∑ —É—á–µ—Ç–Ω–æ–π –∑–∞–ø–∏—Å–∏.")
    else:
        await message.answer("–û—Ç–º–µ–Ω–µ–Ω–æ.")
    await state.finish()


@dp.message_handler(commands=("delreg"))
async def reg(message: types.Message):
    if (BotDB.user_exists(message.from_user.id)):
        BotDB.delete_user(message.from_user.id)
        await message.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª–µ–Ω!")
    else:
        await message.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º id —Ç–µ–ª–µ–≥—Ä–∞–º–º–∞ –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω!")


@dp.message_handler(commands=("delreg"))
async def logout(message: types.Message):
    if (BotDB.user_exists(message.from_user.id)):
        kb = ReplyKeyboardMarkup(
            keyboard=[
                [
                    KeyboardButton(text=f'–î–∞')
                ],
                [
                    KeyboardButton(text=f'–ù–µ—Ç')
                ],
            ],
            resize_keyboard=True,
            one_time_keyboard=True
        )
        await message.answer("–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Å–≤–æ—é —É—á–µ—Ç–Ω—É—é –∑–∞–ø–∏—Å—å?", reply_markup=kb)
        await DeleteRegistrationStates.confirm.set()
    else:
        await message.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º id —Ç–µ–ª–µ–≥—Ä–∞–º–º–∞ –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω!")


@dp.message_handler(state=DeleteRegistrationStates.confirm)
async def process_confirm(message: types.Message, state: FSMContext):
    if message.text.lower() == '–¥–∞':
        BotDB.delete_user(message.from_user.id)
        await message.answer("–í–∞—à–∞ —É—á–µ—Ç–Ω–∞—è –∑–∞–ø–∏—Å—å —É–¥–∞–ª–µ–Ω–∞.")
    else:
        await message.answer("–û—Ç–º–µ–Ω–µ–Ω–æ.")
    await state.finish()


# –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
@dp.message_handler(commands=("login"))
async def process_login_command(message: types.Message):
    # –≤—ã–≤–æ–¥ —Å–ø–∏—Å–∫–∞ –≥—Ä—É–ø–ø –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    if (not BotDB.user_exists(message.from_user.id)):
        await message.answer('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û:')
        await LoginStates.USERNAME_INPUT.set()
    else:
        await message.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º id —Ç–µ–ª–µ–≥—Ä–∞–º–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω!")


# –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@dp.message_handler(state=LoginStates.USERNAME_INPUT)
async def login_input_username_(message: types.Message, state: FSMContext):
    username = message.text
    await state.update_data(username=username)
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ø–∞—Ä–æ–ª—å (–ø–∞—Ä–æ–ª—å –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏):')
    # —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤–≤–æ–¥–∞ –ø–∞—Ä–æ–ª—è
    await LoginStates.PASSWORD_INPUT.set()


# –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –ø–∞—Ä–æ–ª—è
@dp.message_handler(state=LoginStates.PASSWORD_INPUT)
async def login_input_password(message: types.Message, state: FSMContext):
    password = message.text
    password = password.encode('utf-8')
    await bot.delete_message(message.chat.id, message.values.get('message_id'))
    await message.answer("–°–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–∞—Ä–æ–ª–µ–º üóëÔ∏è–£–¥–∞–ª–µ–Ω–æ")
    hashed_password = hashlib.sha256(password).hexdigest()
    data = await state.get_data()
    username = data.get('username')

    user_id = BotDB.find_by_user_fio_and_password(username, hashed_password)
    if not user_id is None:
        BotDB.login_by_id(user_id[0], message.from_user.id)
        await message.answer('–í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ!')
    else:
        await message.answer('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –§–ò–û –∏ –ø–∞—Ä–æ–ª–µ–º –Ω–µ –Ω–∞–π–¥–µ–Ω!')
    # –∑–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.finish()


# –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
@dp.message_handler(commands=("registration", "r", "reg"))
async def process_register_command(message: types.Message):
    # –≤—ã–≤–æ–¥ —Å–ø–∏—Å–∫–∞ –≥—Ä—É–ø–ø –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    if (not BotDB.user_exists(message.from_user.id)):
        groups = BotDB.getAllGroupName()
        keyboard = types.InlineKeyboardMarkup()
        for group in groups:
            button = types.InlineKeyboardButton(text=group[1], callback_data=f'select_group_{group}')
            keyboard.add(button)
        await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É –≥—Ä—É–ø–ø—É:', reply_markup=keyboard)
    else:
        await message.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º id —Ç–µ–ª–µ–≥—Ä–∞–º–º–∞ —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω!")


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É —Å –≥—Ä—É–ø–ø–æ–π
@dp.callback_query_handler(lambda c: c.data.startswith('select_group_'))
async def select_group(callback_query: types.CallbackQuery, state: FSMContext):
    group = callback_query.data.split('_')[-1]
    group_id = group[1:group.index(',')]
    await state.update_data(group_id=group_id)
    await bot.answer_callback_query(callback_query.id)
    await bot.send_message(callback_query.from_user.id,
                           f'–í—ã –≤—ã–±—Ä–∞–ª–∏ –≥—Ä—É–ø–ø—É {group[1]}. –ù–∞–ø–∏—à–∏—Ç–µ –í–∞—à–∏ —Ñ–∞–º–∏–ª–∏—è, –∏–º—è, –æ—Ç—á–µ—Å—Ç–≤–æ (–ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á):')
    await RegistrationStates.USERNAME_INPUT.set()


# –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@dp.message_handler(state=RegistrationStates.USERNAME_INPUT)
async def input_username(message: types.Message, state: FSMContext):
    username = message.text
    if (not BotDB.user_exists_by_name(username)):
        await state.update_data(username=username)
        await message.answer('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ø–∞—Ä–æ–ª—å (–ø–∞—Ä–æ–ª—å –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏):')
        # —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤–≤–æ–¥–∞ –ø–∞—Ä–æ–ª—è
        await RegistrationStates.PASSWORD_INPUT.set()
    else:
        await message.answer('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –§–ò–û —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!')
        await state.finish()


# –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –ø–∞—Ä–æ–ª—è
@dp.message_handler(state=RegistrationStates.PASSWORD_INPUT)
async def input_password(message: types.Message, state: FSMContext):
    password = message.text
    password = password.encode('utf-8')
    await bot.delete_message(message.chat.id, message.values.get('message_id'))
    await message.answer("–°–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–∞—Ä–æ–ª–µ–º üóëÔ∏è–£–¥–∞–ª–µ–Ω–æ")
    hashed_password = hashlib.sha256(password).hexdigest()
    data = await state.get_data()
    group_id = data.get('group_id')
    username = data.get('username')

    # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    BotDB.save_user(group_id, username, hashed_password, message.from_user.id)
    await message.answer('–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!', reply_markup=types.ReplyKeyboardRemove())
    # –∑–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.finish()
