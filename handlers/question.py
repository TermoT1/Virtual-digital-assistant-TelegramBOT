from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import state
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from states import registration
from dispatcher import dp
from bot import BotDB
from dispatcher import bot
from config import ADMINS_ID
from config import URL_SCHEDULE
from states import adminStates
import datetime

@dp.message_handler(commands=("books", "–∫–Ω–∏–≥–∏"), commands_prefix="/!")
async def schedule(message: types.Message):
    if (BotDB.user_exists(message.from_user.id)):
        books_str = ""
        books_str += "üìï–ë–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:" + '\n'
        books_str += "üî¥ –í–≤–µ–¥–µ–Ω–∏–µ –≤ —Å–∏—Å—Ç–µ–º—ã –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö –ö. –î–∂.–î–µ–π—Ç" + '\n' + \
                     "üî¥ MySQL –ø–æ –º–∞–∫—Å–∏–º—É–º—É –ë—ç—Ä–æ–Ω –®–≤–∞—Ä—Ü, –í–∞–¥–∏–º –¢–∫–∞—á–µ–Ω–∫–æ, –ü–µ—Ç—Ä –ó–∞–π—Ü–µ–≤" + '\n' + \
                     "üî¥ –°–µ–º—å –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö –∑–∞ —Å–µ–º—å –Ω–µ–¥–µ–ª—å –î–∂–∏–º –†. –£–∏–ª—Å–æ–Ω, –≠—Ä–∏–∫ –†–µ–¥–º–æ–Ω–¥" + '\n'
        books_str += '\n'
        books_str += 'üìó–ü—Ä–æ–≥—Ä–∞–º–º–Ω–∞—è –∏–Ω–∂–µ–Ω–µ—Ä–∏—è' + '\n'
        books_str += "üü¢–ö–Ω–∏–≥–∞ ¬´–ü—Ä–æ–≥—Ä–∞–º–º–Ω–∞—è –∏–Ω–∂–µ–Ω–µ—Ä–∏—è. –£—á–µ–±–Ω–∏–∫ –¥–ª—è –≤—É–∑–æ–≤. 5-–µ –∏–∑–¥–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –∏ –¥–æ–ø–æ–ª–Ω–µ–Ω–Ω–æ–µ¬ª"
        await message.bot.send_message(message.from_user.id, books_str)
    else:
        await message.reply("–ü—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é /reg \n–ò–ª–∏ –≤–æ–π–¥–∏—Ç–µ –≤ —Å–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç /login")

@dp.message_handler(commands=("schedule", "—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ"), commands_prefix="/!")
async def schedule(message: types.Message):
    if (BotDB.user_exists(message.from_user.id)):
        group = BotDB.get_group_by_user_id(message.from_user.id)
        str = "–°—Å—ã–ª–∫–∞ –Ω–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≤–∞—à–µ–π –≥—Ä—É–ø–ø—ã: " + URL_SCHEDULE + group
        # –æ–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É
        today = datetime.date.today()
        # –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–æ–º–µ—Ä –Ω–µ–¥–µ–ª–∏ –≤ –≥–æ–¥—É (ISO-—Ñ–æ—Ä–º–∞—Ç)
        week_number = today.isocalendar()[1]
        # –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á–µ—Ç–Ω–∞—è –ª–∏ –Ω–µ–¥–µ–ª—è
        if week_number % 2 == 0:
            week = "–°–µ–π—á–∞—Å –∏–¥–µ—Ç —á–µ—Ç–Ω–∞—è –Ω–µ–¥–µ–ª—è"
        else:
            week = "–°–µ–π—á–∞—Å –∏–¥–µ—Ç –Ω–µ—á–µ—Ç–Ω–∞—è –Ω–µ–¥–µ–ª—è"
        str += "\n" + week
        await message.bot.send_message(message.from_user.id, str)
    else:
        await message.reply("–ü—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é /reg \n–ò–ª–∏ –≤–æ–π–¥–∏—Ç–µ –≤ —Å–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç /login")

@dp.message_handler(commands=("question", "quest", "q"), commands_prefix="/!")
async def quest(message: types.Message):
    if BotDB.user_exists(message.from_user.id):
        answer = ""
        cmd_variants = (('/question', '/quest', '/q',))
        question = message.text
        for i in cmd_variants:
            question = question.replace(i, '').strip()
        if len(question):
            await message.answer(f"Question: {question}")
            answer = BotDB.answer_question(question)
        else:
            await message.reply("–ü—É—Å—Ç–æ–π –≤–æ–ø—Ä–æ—Å!")
        if len(answer):
            str = answer[0]
            await message.answer(f"–û—Ç–≤–µ—Ç: {str[0]}")
        else:
            await message.reply("–û—Ç–≤–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            kb = ReplyKeyboardMarkup(
                keyboard=[
                    [
                        KeyboardButton(text=f'–î–∞')
                    ],
                    [
                        KeyboardButton(text=f'–ù–µ—Ç')
                    ],
                ],
                resize_keyboard=True,
                one_time_keyboard=True
            )
            #–ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ question –¥–∞–ª—å—à–µ
            global unfound_question
            unfound_question = question
            await message.answer(f"–•–æ—Ç–µ–ª–∏ –±—ã –≤—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—é?", reply_markup=kb)
            global name_student
            name_student = BotDB.get_user_by_id_my(message.from_user.id)
            await adminStates.message.set()
    else:
        await message.reply("–ü—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é /reg \n–ò–ª–∏ –≤–æ–π–¥–∏—Ç–µ –≤ —Å–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç /login")


@dp.message_handler(state=adminStates.message)
async def message_admin(message: types.Message, state: FSMContext):
    str = message.text
    if str == "–î–∞":
        strr = f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {name_student} —Å id {message.from_user.id}:\n" \
              f"–ù–µ –Ω–∞–π–¥–µ–Ω –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å:\n" + unfound_question
        for admin in ADMINS_ID:
            await bot.send_message(admin, strr)
        await state.finish()
    elif str == "–ù–µ—Ç":
        await state.finish()
    else:
        await message.answer("–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞!")
        await state.finish()


@dp.message_handler(commands=("qid"), commands_prefix="/!")
async def select_by_id(message: types.Message):
    if (BotDB.user_exists(message.from_user.id)):
        cmd_variants = (('/qid', '/QID'))
        id = message.text
        for i in cmd_variants:
            for j in i:
                id = id.replace(j, '').strip()

        if len(id):
            qst_answr = BotDB.answer_question_by_id(id)
        else:
            await message.reply("–ù–µ –≤–≤–µ–¥–µ–Ω id!")

        if len(qst_answr):
            i = qst_answr[0]
            await message.answer(f"Id: {i[0]}")
            await message.answer(f"–í–æ–ø—Ä–æ—Å: {i[1]}")
            await message.answer(f"–û—Ç–≤–µ—Ç: {i[2]}")
        else:
            await message.reply("–ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
    else:
        await message.reply("–ü—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é! /reg")


@dp.message_handler(commands=("m"), commands_prefix="/!")
async def message(message: types.Message):
    if (BotDB.user_exists(message.from_user.id)):
        cmd_variants = (('/m', '/M'))
        mess = message.text
        for i in cmd_variants:
            for j in i:
                mess = mess.replace(j, '').strip()
        if len(mess):
            global name_student
            name_student = BotDB.get_group_by_user_id2(message.from_user.id)
            str = f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç —Å—Ç—É–¥–µ–Ω—Ç–∞ {name_student[0]} —Å id {message.from_user.id}:\n"
            for admin in ADMINS_ID:
                await bot.send_message(admin, str + mess)
        else:
            await message.reply("–ü—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ!")
    else:
        await message.reply("–ü—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é! /reg")


